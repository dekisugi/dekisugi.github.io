#!/usr/bin/env ruby

blog = %r{/one/.*(?<y>[0-9]{4})-?(?<m>[0-9]{2})-?(?<d>[0-9]{2})_(?<s>[0-9A-Za-z_-]+)}
blog_article = %r{\A#{blog}\.(?:html|md)\z}
blog_attach = %r{\A#{blog}/(?<a>(?<w>[^/]+?)(?:\.[^/.]+)?)\z}

preprocess do
  items.each do |item|
    if blog_article.match(item.identifier.to_s) then
      item[:kind] = 'article'

      # 私はね、性的サイトジェネレータのルールに縛られるのが嫌だからね、こうやって独自のディレクトリ構造を採用してるんですよ。それなのにね、created_atが無ければ作成日が解らんと。そんなもんファイル名に書いてあるじゃないですか。Nanocさんが勝手に読めばいいじゃないですか。なんで私がこんなコード書かなならんのですか。結局縛られてるじゃないですか。
      unless item[:created_at] then
        item[:created_at] = "#{$~[:y]}-#{$~[:m]}-#{$~[:d]}"
      end
    end
  end
end

compile '/**/*.{html,md}' do
  ext = item.identifier.ext

  # frontmatterにtitleが存在している場合のみ中身を加工する
  # (本当はfrontmatterが存在するかどうかを確認したいんだけれど、簡便な方法が思いつかない)
  if item.key?(:title) then
    filter :kramdown, input: 'GFM', auto_ids: false if item.identifier.ext == 'md'

    locals = Hash.new('')
    locals['title'] = item[:title] + ' - ' if item[:title]
    locals['title'] += config[:site_name]

    layout '/default.html', locals: locals

    # ブログ記事一覧生成用
    filter :erb if item.identifier.without_ext == '/blog-articles'

    filter :relativize_paths, type: :html5 unless item.identifier.without_ext == '/404'

    ext = 'html'
  end

  if blog_article.match(item.identifier.to_s) then
    write "/one/#{$~[:y]}/#{$~[:m]}/#{$~[:d]}/#{$~[:s]}/index.#{ext}"
  elsif blog_attach.match(item.identifier.to_s) then
    write "/one/#{$~[:y]}/#{$~[:m]}/#{$~[:d]}/#{$~[:s]}/#{$~[:w]}.#{ext}"
  elsif item.identifier.without_ext == '/blog-articles'
    write '/one/index.html'
  else
    write item.identifier.without_ext + '.' + ext
  end
end

compile blog_attach do
  blog_attach.match(item.identifier.to_s)
  write "/one/#{$~[:y]}/#{$~[:m]}/#{$~[:d]}/#{$~[:s]}/#{$~[:a]}"
end

# Using Sass source maps
# https://nanoc.ws/doc/guides/using-common-filters/#using-sass-source-maps
[:default, :sourcemap].each do |rep_name|
  compile '/**/*.{sass,scss}', rep: rep_name do
    path = item.identifier.without_ext + '.css'
    options = { syntax: (item.identifier.ext == 'scss' ? :scss : :sass),
                style: :expanded,
                css_path: path,
                sourcemap_path: path + '.map',
                }

    case rep_name
    when :default
      filter :sass, options
      write path
    when :sourcemap
      filter :sass_sourcemap, options
      write path + '.map'
    end
  end
end

compile '/**/*' do
  write item.identifier.to_s
end

layout '/**/*', :erb
